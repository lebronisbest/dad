version: '3.8'

services:
  # 웹 애플리케이션
  web:
    build:
      context: ./construction-safety-app
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@db:5432/construction_safety
      - JWT_SECRET=your-super-secret-jwt-key-here
      - UPLOAD_DIR=/app/uploads
      - EXPORT_DIR=/app/exports
    volumes:
      - ./construction-safety-app/uploads:/app/uploads
      - ./construction-safety-app/exports:/app/exports
      - ./construction-safety-app/processed:/app/processed
      - ./construction-safety-app/thumbnails:/app/thumbnails
    depends_on:
      - db
      - minio
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP 서버
  mcp:
    build:
      context: ./construction-safety-mcp-server
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MCP_PORT=3002
      - API_BASE_URL=http://web:3001
      - EXPORTS_DIR=/app/exports
    volumes:
      - ./construction-safety-mcp-server/exports:/app/exports
    depends_on:
      - web
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=construction_safety
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d construction_safety"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3 호환 스토리지)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (세션 및 캐시)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (리버스 프록시)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - mcp
    networks:
      - construction-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  construction-safety-network:
    driver: bridge
